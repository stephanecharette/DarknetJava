// Generated by jextract

package darknet;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct DarknetDetection {
 *     DarknetBox bbox;
 *     int classes;
 *     int best_class_idx;
 *     float *prob;
 *     float *mask;
 *     float objectness;
 *     int sort_class;
 *     float *uc;
 *     int points;
 *     float *embeddings;
 *     int embedding_size;
 *     float sim;
 *     int track_id;
 * }
 * }
 */
public class DarknetDetection {

    DarknetDetection() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        DarknetBox.layout().withName("bbox"),
        darknet.C_INT.withName("classes"),
        darknet.C_INT.withName("best_class_idx"),
        darknet.C_POINTER.withName("prob"),
        darknet.C_POINTER.withName("mask"),
        darknet.C_FLOAT.withName("objectness"),
        darknet.C_INT.withName("sort_class"),
        darknet.C_POINTER.withName("uc"),
        darknet.C_INT.withName("points"),
        MemoryLayout.paddingLayout(4),
        darknet.C_POINTER.withName("embeddings"),
        darknet.C_INT.withName("embedding_size"),
        darknet.C_FLOAT.withName("sim"),
        darknet.C_INT.withName("track_id"),
        MemoryLayout.paddingLayout(4)
    ).withName("DarknetDetection");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout bbox$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("bbox"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * DarknetBox bbox
     * }
     */
    public static final GroupLayout bbox$layout() {
        return bbox$LAYOUT;
    }

    private static final long bbox$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * DarknetBox bbox
     * }
     */
    public static final long bbox$offset() {
        return bbox$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * DarknetBox bbox
     * }
     */
    public static MemorySegment bbox(MemorySegment struct) {
        return struct.asSlice(bbox$OFFSET, bbox$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * DarknetBox bbox
     * }
     */
    public static void bbox(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, bbox$OFFSET, bbox$LAYOUT.byteSize());
    }

    private static final OfInt classes$LAYOUT = (OfInt)$LAYOUT.select(groupElement("classes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int classes
     * }
     */
    public static final OfInt classes$layout() {
        return classes$LAYOUT;
    }

    private static final long classes$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int classes
     * }
     */
    public static final long classes$offset() {
        return classes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int classes
     * }
     */
    public static int classes(MemorySegment struct) {
        return struct.get(classes$LAYOUT, classes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int classes
     * }
     */
    public static void classes(MemorySegment struct, int fieldValue) {
        struct.set(classes$LAYOUT, classes$OFFSET, fieldValue);
    }

    private static final OfInt best_class_idx$LAYOUT = (OfInt)$LAYOUT.select(groupElement("best_class_idx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int best_class_idx
     * }
     */
    public static final OfInt best_class_idx$layout() {
        return best_class_idx$LAYOUT;
    }

    private static final long best_class_idx$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int best_class_idx
     * }
     */
    public static final long best_class_idx$offset() {
        return best_class_idx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int best_class_idx
     * }
     */
    public static int best_class_idx(MemorySegment struct) {
        return struct.get(best_class_idx$LAYOUT, best_class_idx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int best_class_idx
     * }
     */
    public static void best_class_idx(MemorySegment struct, int fieldValue) {
        struct.set(best_class_idx$LAYOUT, best_class_idx$OFFSET, fieldValue);
    }

    private static final AddressLayout prob$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("prob"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float *prob
     * }
     */
    public static final AddressLayout prob$layout() {
        return prob$LAYOUT;
    }

    private static final long prob$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float *prob
     * }
     */
    public static final long prob$offset() {
        return prob$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float *prob
     * }
     */
    public static MemorySegment prob(MemorySegment struct) {
        return struct.get(prob$LAYOUT, prob$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float *prob
     * }
     */
    public static void prob(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(prob$LAYOUT, prob$OFFSET, fieldValue);
    }

    private static final AddressLayout mask$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("mask"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float *mask
     * }
     */
    public static final AddressLayout mask$layout() {
        return mask$LAYOUT;
    }

    private static final long mask$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float *mask
     * }
     */
    public static final long mask$offset() {
        return mask$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float *mask
     * }
     */
    public static MemorySegment mask(MemorySegment struct) {
        return struct.get(mask$LAYOUT, mask$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float *mask
     * }
     */
    public static void mask(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(mask$LAYOUT, mask$OFFSET, fieldValue);
    }

    private static final OfFloat objectness$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("objectness"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float objectness
     * }
     */
    public static final OfFloat objectness$layout() {
        return objectness$LAYOUT;
    }

    private static final long objectness$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float objectness
     * }
     */
    public static final long objectness$offset() {
        return objectness$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float objectness
     * }
     */
    public static float objectness(MemorySegment struct) {
        return struct.get(objectness$LAYOUT, objectness$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float objectness
     * }
     */
    public static void objectness(MemorySegment struct, float fieldValue) {
        struct.set(objectness$LAYOUT, objectness$OFFSET, fieldValue);
    }

    private static final OfInt sort_class$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sort_class"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int sort_class
     * }
     */
    public static final OfInt sort_class$layout() {
        return sort_class$LAYOUT;
    }

    private static final long sort_class$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int sort_class
     * }
     */
    public static final long sort_class$offset() {
        return sort_class$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int sort_class
     * }
     */
    public static int sort_class(MemorySegment struct) {
        return struct.get(sort_class$LAYOUT, sort_class$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int sort_class
     * }
     */
    public static void sort_class(MemorySegment struct, int fieldValue) {
        struct.set(sort_class$LAYOUT, sort_class$OFFSET, fieldValue);
    }

    private static final AddressLayout uc$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("uc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float *uc
     * }
     */
    public static final AddressLayout uc$layout() {
        return uc$LAYOUT;
    }

    private static final long uc$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float *uc
     * }
     */
    public static final long uc$offset() {
        return uc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float *uc
     * }
     */
    public static MemorySegment uc(MemorySegment struct) {
        return struct.get(uc$LAYOUT, uc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float *uc
     * }
     */
    public static void uc(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(uc$LAYOUT, uc$OFFSET, fieldValue);
    }

    private static final OfInt points$LAYOUT = (OfInt)$LAYOUT.select(groupElement("points"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int points
     * }
     */
    public static final OfInt points$layout() {
        return points$LAYOUT;
    }

    private static final long points$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int points
     * }
     */
    public static final long points$offset() {
        return points$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int points
     * }
     */
    public static int points(MemorySegment struct) {
        return struct.get(points$LAYOUT, points$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int points
     * }
     */
    public static void points(MemorySegment struct, int fieldValue) {
        struct.set(points$LAYOUT, points$OFFSET, fieldValue);
    }

    private static final AddressLayout embeddings$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("embeddings"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float *embeddings
     * }
     */
    public static final AddressLayout embeddings$layout() {
        return embeddings$LAYOUT;
    }

    private static final long embeddings$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float *embeddings
     * }
     */
    public static final long embeddings$offset() {
        return embeddings$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float *embeddings
     * }
     */
    public static MemorySegment embeddings(MemorySegment struct) {
        return struct.get(embeddings$LAYOUT, embeddings$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float *embeddings
     * }
     */
    public static void embeddings(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(embeddings$LAYOUT, embeddings$OFFSET, fieldValue);
    }

    private static final OfInt embedding_size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("embedding_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int embedding_size
     * }
     */
    public static final OfInt embedding_size$layout() {
        return embedding_size$LAYOUT;
    }

    private static final long embedding_size$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int embedding_size
     * }
     */
    public static final long embedding_size$offset() {
        return embedding_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int embedding_size
     * }
     */
    public static int embedding_size(MemorySegment struct) {
        return struct.get(embedding_size$LAYOUT, embedding_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int embedding_size
     * }
     */
    public static void embedding_size(MemorySegment struct, int fieldValue) {
        struct.set(embedding_size$LAYOUT, embedding_size$OFFSET, fieldValue);
    }

    private static final OfFloat sim$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("sim"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float sim
     * }
     */
    public static final OfFloat sim$layout() {
        return sim$LAYOUT;
    }

    private static final long sim$OFFSET = 76;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float sim
     * }
     */
    public static final long sim$offset() {
        return sim$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float sim
     * }
     */
    public static float sim(MemorySegment struct) {
        return struct.get(sim$LAYOUT, sim$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float sim
     * }
     */
    public static void sim(MemorySegment struct, float fieldValue) {
        struct.set(sim$LAYOUT, sim$OFFSET, fieldValue);
    }

    private static final OfInt track_id$LAYOUT = (OfInt)$LAYOUT.select(groupElement("track_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int track_id
     * }
     */
    public static final OfInt track_id$layout() {
        return track_id$LAYOUT;
    }

    private static final long track_id$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int track_id
     * }
     */
    public static final long track_id$offset() {
        return track_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int track_id
     * }
     */
    public static int track_id(MemorySegment struct) {
        return struct.get(track_id$LAYOUT, track_id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int track_id
     * }
     */
    public static void track_id(MemorySegment struct, int fieldValue) {
        struct.set(track_id$LAYOUT, track_id$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

